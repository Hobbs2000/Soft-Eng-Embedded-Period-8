 var isCallable = (function(toString){
        var s = toString.call(toString),
            u = typeof u;
        return typeof this.alert === "object" ?
          function isCallable(f){
            return s === toString.call(f) || (!!f && typeof f.toString == u && typeof f.valueOf == u && /^\s*\bfunction\b/.test("" + f));
          }:
          function isCallable(f){
            return s === toString.call(f);
          }
        ;
    })(Object.prototype.toString);

function validateArguments(O, callback, accept){
	if(typeof(O)!=='object'){
	  // Throw Error
	  throw new TypeError("Object.observeObject called on non-object");
	}
	if(isCallable(callback)===false){
	  // Throw Error
	  throw new TypeError("Object.observeObject: Expecting function");
	}
	if(Object.isFrozen(callback)===true){
	  // Throw Error
	  throw new TypeError("Object.observeObject: Expecting unfrozen function");
	}
	if (accept !== undefined) {
	  if (!Array.isArray(accept)) {
	    throw new TypeError("Object.observeObject: Expecting acceptList in the form of an array");
	  }
	}
}