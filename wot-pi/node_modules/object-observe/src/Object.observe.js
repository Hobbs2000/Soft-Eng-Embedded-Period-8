if(!Object.observe){
  (function(extend, global){
  	var keys            = [];
  	var performWeakMap  = new WeakMap();
  	var oldValueWeakMap = new WeakMap();
  	var propListWeakMap = new WeakMap();

  	// Notify -------------------------------------start

  	function _Notify(o){
  		this.o = o;
  	}

  	_Notify.prototype.performChange = performChange;

  	_Notify.prototype.notify = notify;

  	//변경이 수행되어도 통지되지 않음.
  	//accept .. ? ..
  	//TODO
  	function performChange(accept, callback, self){
  		puse();
  		_.times(keys.length, checker);
  		callback.apply(self);
  		_.forEach(keys, applyNewData);
  		start();
  	}

  	function notify(notifyObject){
  		var performs;
  		performs = performWeakMap.get(notifyObject.object);
  		_.forEach(performs, function(perform){
  			if( perform.accept.indexOf(notifyObject.type) !== -1){
  				perform.notify.push(notifyObject);
  			}
  		});
  	}

  	// Notify-------------------------------------end

  	function observe(o, callback, accept){
  		initKeys(o, callback);
  		registPerform(o, callback, accept);
  		initOldValue(o);
  		initPropList(o);
  		start();
  	}

  	function registPerform(o, callback, accept){
  		validateArguments(o, callback, accept);
  		accept = (_.isUndefined(accept)) ? ['add', 'update', 'delete', 'reconfigure', 'setPrototype', 'preventExtensions'] : accept;

  		var performs = performWeakMap.get(o);
  		performs.push({
  			callback : callback,
  			accept   : accept,
  			notify   : []
  		});
  	}

  	function unobserve(o, callback){
  		validateArguments(o, callback);
  		
  		if(keys.indexOf(o) === -1){
  			return;
  		}

  		var performs = performWeakMap.get(o);
  		var i, l = performs.length;
  		for(i = 0 ; i < l ; i ++){
  			if( callback === performs[i].callback ){
  				performs.splice(i, 2);
  				l --;
  			}
  		}

  		if(l === 0){
  			deleteObserve(o);
  		}
  	}

  	function deleteObserve(o){
  		if(keys.indexOf(o) !== -1){
  			performWeakMap.delete(o);
  			oldValueWeakMap.delete(o);
  			propListWeakMap.delete(o);
  			_.pull(keys, o);
  		}
  	}

  	function initKeys(o, callback){
  		if(keys.indexOf(o) === -1){
  			performWeakMap.set(o, []);
  			oldValueWeakMap.set(o, {});
  			propListWeakMap.set(o, []);
  			keys.push(o);
  		}
  	}

  	function initOldValue(o){
  		var oldValueObj = {};
  		_.forIn(o, function(val, prop){
  			oldValueObj[prop] = val;
  		});
  		oldValueWeakMap.set(o, oldValueObj);
  	}

  	function initPropList(o){
  		propListWeakMap.set(o, _.keys(o));
  	}

  	var checker = (function(){
  		var noti,
  				propList,
  		 	  newPropList,
  			  oldPropList,
  			  deletePropList,
  			  addPropList,
  			  checkPropList,
  			  updatePropList,
  			  i = -1,
  			  l,
  			  o;

  		function checker(){
  			if( !checkKeys() ){
  				return;
  			}

  			setValues();

  			notifyUpdate();
  			notifyAdd();
  			notifyDelete();

  			applyNewData(o);


  			if(isTail()){
  				i = -1;
  				exec();
  			}	
  		}

  		function checkKeys(){
        if(keys.length === 0){
          puse();
          return false;
        }
        return true;
      }

      function isTail(){
      	return i+1 >= l;
      }

  		function setValues(){
  			l = keys.length;
  			i++;

				o    = keys[i];
				noti = getNotifier(o);

				newPropList = _.keys(o);
				propList = propListWeakMap.get(o);
				oldPropList = oldValueWeakMap.get(o);

  			deletePropList = _.difference(propList, newPropList);
  			addPropList    = _.difference(newPropList, propList);
  			checkPropList  = _.difference(propList, deletePropList);
  			updatePropList = [];
  			_.forEach(checkPropList, function(checkProp){
  				if(oldPropList[checkProp] !== o[checkProp]){
  					updatePropList.push(checkProp);
  				}
  			});
  		}

  		function notifyUpdate(){
  			_.forEach(updatePropList, function(prop){
  				noti.notify({
  					name     : prop,
  					object   : o,
  					type     : 'update',
  					oldValue : oldPropList[prop]
  				});
  			});
  		}

  		function notifyAdd(){
  			_.forEach(addPropList, function(prop){
  				noti.notify({
  					name   : prop,
  					object : o,
  					type   : 'add'
  				});
  			});
  		}

  		function notifyDelete(){
  			_.forEach(deletePropList, function(prop){
  				noti.notify({
  					name     : prop,
  					object   : o,
  					type     : 'delete',
  					oldValue : oldPropList[prop]
  				});
  			});
  		}

  		return checker;
  	})();

  	function applyNewData(o){
  		propListWeakMap.set(o, _.keys(o));
  		initOldValue(o);
  	}

  	var checkerID = -1;
  	function start(){
  		if(checkerID === -1){
  			//checkerID = setImmediate(checker);
        checkerID = setInterval(checker,1);
  		}
  	}

  	function puse(){
  		if(checkerID !== -1){
  			//cleartImmediate(checkerID);
        clearInterval(checkerID);
  			checkerID = -1;
  		}
  	}

  	function deliverChangeRecords(callback){
  		if( !_.isFunction(callback) ){
  			throw new TypeError();
  		}
  		
  		puse();
  		_.times(keys.length, checker);

  		var performs;
  		_.forEach(keys, function(o){
  			performs = performWeakMap.get(o);
  			_.forEach(performs, function(perform){
  				if(	perform.notify.length !== 0	&& perform.callback == callback ){
  					perform.callback(perform.notify);
  					perform.notify = [];
  				}
  			});
  		});

  		start();
  	}

  	function exec(){
  		var performs;
  		_.forEach(keys, function(o){
  			performs = performWeakMap.get(o);
  			_.forEach(performs, function(perform){
  				if(	perform.notify.length !== 0 ){
  					perform.callback.call(undefined, perform.notify);
  					perform.notify = [];
  				}
  			});
  		});
  		performs = null;
  	}

  	function getNotifier(o){
  		return new _Notify(o);
  	}

		extend.observe              = observe;
		extend.unobserve            = unobserve;
		extend.deliverChangeRecords = deliverChangeRecords;
		extend.getNotifier          = getNotifier;

  })(Object, this);
}